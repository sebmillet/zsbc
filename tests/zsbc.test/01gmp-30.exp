# tests/zsbc.test/01gmp-30.exp

set timeout 3
spawn "$ZSBC" --SCM "$TESTDIR/01gmp-30.b"
send_user "***   GMP - arrays\n"

set test "Array"
send -- "i=0;while(i<=1000){va\[i\]=i+1;i+=1}\ni=998;while(i<=1001){va\[i\];i+=1}\n"
expect {
	-re "999\[^0-9\]+1000\[^0-9\]+1001\[^0-9\]+0\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Increment (1)"
send -- "101\na++\n202\na\n"
expect {
	-re "101\[^0-9\]+0\[^0-9\]+202\[^0-9\]+1\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Increment (2)"
send -- "303\n++a\n404\n"
expect {
	-re "303\[^0-9\]+2\[^0-9\]+404\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Increment (3)"
send -- "a\[0\]=55;101\na\[0\]++\n202\na\[0\]\n"
expect {
	-re "101\[^0-9\]+55\[^0-9\]+202\[^0-9\]+56\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Increment (4)"
send -- "a\[0\]=77;303\n++a\[0\]\n404\na\[0\]\n"
expect {
	-re "303\[^0-9\]+78\[^0-9\]+404\[^0-9\]+78\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "10K elements arrays (1)"
send -- "for(i=0;i<=10000;++i)test\[i\]=i+1\nt=0;u=0\nfor(i=0;i<=10000;++i){t+=test\[i\];u+=(-1)^i*test\[i\]}\n606\nt\nu\nfor(i=0;i<=3;)2^test\[++i\]\n707\n"
expect {
	-re "606\[^0-9\]+50015001\[^0-9\]+5001\[^0-9\]+4\[^0-9\]+8\[^0-9\]+16\[^0-9\]+32\[^0-9\]+707\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Inc operator (1)"
send -- "a=1;uv\[++a\]=a;uw\[a++\]=a\n808\nuv\[1\]\nuv\[2\]\nuw\[2\]\nuw\[3\]\na\n909\n"
expect {
	-re "808\[^0-9\]+0\[^0-9\]+1\[^0-9\]+2\[^0-9\]+0\[^0-9\]+3\[^0-9\]+909\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Inc operator (2)"
send -- "a=1;++ba\[++a\];++bb\[a++\]\n616\nba\[1\]\nba\[2\]\nbb\[2\]\nbb\[3\]\na\n171\n"
expect {
	-re "616\[^0-9\]+0\[^0-9\]+1\[^0-9\]+1\[^0-9\]+0\[^0-9\]+3\[^0-9\]+171\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Inc operator (3)"
send -- "626\na=1;++uv\[++a\];++uw\[a++\]\nuv\[1\]\nuv\[2\]\nuw\[2\]\nuw\[3\]\na\n181\n"
expect {
	-re "626\[^0-9\]+2\[^0-9\]+3\[^0-9\]+0\[^0-9\]+2\[^0-9\]+3\[^0-9\]+0\[^0-9\]+3\[^0-9\]+181\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Inc operator (4)"
send -- "636\na=1;uv\[++a\]++;uw\[a++\]++\nuv\[1\]\nuv\[2\]\nuw\[2\]\nuw\[3\]\na\n191\n"
expect {
	-re "636\[^0-9\]+2\[^0-9\]+3\[^0-9\]+0\[^0-9\]+3\[^0-9\]+4\[^0-9\]+0\[^0-9\]+3\[^0-9\]+191\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Dec operator (1)"
send -- "a=10;er\[--a\]=a;es\[a--\]=a\n898\ner\[10\]\ner\[9\]\nes\[9\]\nes\[8\]\na\n989\n"
expect {
	-re "898\[^0-9\]+0\[^0-9\]+10\[^0-9\]+9\[^0-9\]+0\[^0-9\]+8\[^0-9\]+989\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Dec operator (2)"
send -- "a=10;--ar\[--a\];--as\[a--\]\n676\nar\[10\]\nar\[9\]\nas\[9\]\nas\[8\]\na\n373\n"
expect {
	-re "676\[^0-9\]+0\[^0-9\]+-1\[^0-9\]+-1\[^0-9\]+0\[^0-9\]+8\[^0-9\]+373\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Dec operator (3)"
send -- "656\na=10;--er\[--a\];--es\[a--\]\ner\[10\]\ner\[9\]\nes\[9\]\nes\[8\]\na\n484\n"
expect {
	-re "656\[^0-9\]+9\[^0-9\]+8\[^0-9\]+0\[^0-9\]+9\[^0-9\]+8\[^0-9\]+0\[^0-9\]+8\[^0-9\]+484\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Dec operator (4)"
send -- "696\na=10;er\[--a\]--;es\[a--\]--\ner\[10\]\ner\[9\]\nes\[9\]\nes\[8\]\na\n494\n"
expect {
	-re "696\[^0-9\]+9\[^0-9\]+8\[^0-9\]+0\[^0-9\]+8\[^0-9\]+7\[^0-9\]+0\[^0-9\]+8\[^0-9\]+494\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Assignment operators with array (1)"
send -- "575\nalpha\[0\]=3;alpha\[0\]^=2\nalpha\[0\]\n868\n"
expect {
	-re "575\[^0-9\]+9\[^0-9\]+868\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Walk in array (1)"
send -- "989\ntarray()\ntabl\[3000\]=-10\ntarrayref(tabl\[\])\nverif(zeta1\[\],1,500)\nverif(tabl\[\],-1,501)\nverif2(zeta1\[\],1,502)\nverif2(tabl\[\],-1,503)\ntabl\[3000\]\n979\n"
expect {
	-re "989\[^0-9\]+VERIFOK:500\[^0-9\]+VERIFOK:501\[^0-9\]+VERIFBYREFOK:502\[^0-9\]+VERIFBYREFOK:503\[^0-9\]+-10\[^0-9\]+979\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Walk in array (2)"
send -- "989\ntarray2()\nzabl\[3001\]=-17\ntarray2ref(zabl\[\])\nverif(zeta2\[\],2,504)\nverif(zabl\[\],-2,505)\nverif2(zeta2\[\],2,506)\nverif2(zabl\[\],-2,507)\nzabl\[3001\]\n979\n"
expect {
	-re "989\[^0-9\]+VERIFOK:504\[^0-9\]+VERIFOK:505\[^0-9\]+VERIFBYREFOK:506\[^0-9\]+VERIFBYREFOK:507\[^0-9\]+-17\[^0-9\]+979\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Bug 'elem of non existent array in function' fix check"
send -- "123\ne0(zzzz\[\])\n321\n"
expect {
	-re "123\[^0-9\]+0\[^0-9\]+321\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Array bounds (1)"
send -- "193\nmyarray\[16777215\]\n391\n"
expect {
	-re "193\[^0-9\]+0\[^0-9\]+391\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Array bounds (2)"
send -- "993\nmyarray\[16777216\]\n991\n"
expect {
	-re "993\[^0-9\]+Array index out of bounds\[^0-9\]+991\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Array bounds (3)"
send -- "183\nmyarray\[10^20\]\n381\n"
expect {
	-re "183\[^0-9\]+Array index out of bounds\[^0-9\]+381\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Array bounds (4)"
send -- "173\nmyarray\[2^48-1\]\n371\n"
expect {
	-re "173\[^0-9\]+Array index out of bounds\[^0-9\]+371\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Array bounds (5)"
send -- "9193\nmyarray\[-1\]\n9391\n"
expect {
	-re "9193\[^0-9\]+Array index out of bounds\[^0-9\]+9391\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Array bounds (6)"
send -- "9183\nmyarray\[-10^20\]\n9381\n"
expect {
	-re "9183\[^0-9\]+Array index out of bounds\[^0-9\]+9381\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Array bounds (7)"
send -- "9173\nmyarray\[-2^48+1\]\n9371\n"
expect {
	-re "9173\[^0-9\]+Array index out of bounds\[^0-9\]+9371\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Checking object count ref is null"
send "quit\n"
expect {
	-re "OK.*number count.*should be 0.*: 0\[^0-9\]+OK.*expr_t.*count.*should be 0.*: 0\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

