## Generated by tests/gen.sh
##   01gmp-41.exp -> 02bc-41.exp
##   Date: Sun Dec 20 15:12:18 CET 2015
##
## git information: 01gmp-41.exp version used to generate 02bc-41.exp:
##   commit 90ae44cc700081de9dac8c8948d296ec2eefc447
##   Author: SÃ©bastien Millet <sebastien.millet1@club-internet.fr>
##   Date:   Sun Dec 20 14:32:40 2015 +0100

## *** DO NOT UPDATE MANUALLY ***

# tests/zsbc.test/02bc-41.exp

set timeout 3
spawn "$ZSBC" --SCM --numlib bc "$TESTDIR/01gmp-41.b"
send_user "***   BC - functions defined from files invoked in command-line arguments\n"

set test "Function pow2"
send "101\npow2(10)\npow2(10+1)\npow2(5+5+1+1)\n909\n"
expect {
	-re "101\[^0-9\]+1024\[^0-9\]+2048\[^0-9\]+4096\[^0-9\]+909\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function powmod"
send "121\npowmod(51,39, 97)\na=52;b=40;c=101;powmod(a,b,c);powmod(a+2,b+1,c+1)\n919\n"
expect {
	-re "121\[^0-9\]+67\[^0-9\]+95\[^0-9\]+48\[^0-9\]+919\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function powmod with bad argument type (1)"
send "314\n\npowmod(a\[\],39, 97)\n\n315\n\n\n"
expect {
	-re "314.*Parameter type mismatch.*315" { pass "$test" }
	default { fail "$test" }
}

set test "Function powmod with bad argument type (2)"
send "316\n\npowmod(1,2,ba\[\])\n\n317\n\n\n"
expect {
	-re "316.*Parameter type mismatch.*317" { pass "$test" }
	default { fail "$test" }
}

set test "Check return statement"
send "131\ncheckreturn()\n929\n"
expect {
	-re "131\[^0-9\]+1\[^0-9\]+929\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function call with update of value arguments"
send "151\na=10;b=11\nmyfcnt(a,b)\na\nb\n949\n"
expect {
	-re "151\[^0-9\]+53\[^0-9\]+10\[^0-9\]+11\[^0-9\]+949\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Recursive function call"
send "141\nfact(10+1)\na=10\nfact(a)\n939\n"
expect {
	-re "141\[^0-9\]+39916800\[^0-9\]+3628800\[^0-9\]+939\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Calling with wrong number of arguments (1)"
send "4550\ncheckreturn(0)\n4551\n"
expect {
	-re "4550\[^0-9\]+Parameter number mismatch\[^0-9\]+4551" { pass "$test" }
	default { fail "$test" }
}

set test "Calling with wrong number of arguments (2)"
send "4552\nfact()\n4553\n"
expect {
	-re "4552\[^0-9\]+Parameter number mismatch\[^0-9\]+4553" { pass "$test" }
	default { fail "$test" }
}

set test "Calling with wrong number of arguments (3)"
send "4554\nfact(1, 1)\n4555\n"
expect {
	-re "4554\[^0-9\]+Parameter number mismatch\[^0-9\]+4555" { pass "$test" }
	default { fail "$test" }
}

set test "Calling with wrong number of arguments (4)"
send "4556\npowmod(1, 2)\n4557\n"
expect {
	-re "4556\[^0-9\]+Parameter number mismatch\[^0-9\]+4557" { pass "$test" }
	default { fail "$test" }
}

set test "Calling with wrong number of arguments (5)"
send "4558\npowmod(1, 2, a[], ba[])\n4559\n"
expect {
	-re "4558\[^0-9\]+Parameter number mismatch\[^0-9\]+4559" { pass "$test" }
	default { fail "$test" }
}

set test "Checking object count ref is null"
send "quit\n"
expect {
	-re "OK.*number count.*should be 0.*: 0\[^0-9\]+OK.*expr_t.*count.*should be 0.*: 0\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

