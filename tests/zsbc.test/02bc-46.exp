## Generated by tests/gen.sh
##   01gmp-46.exp -> 02bc-46.exp
##   Date: Sat Oct 24 18:03:54 CEST 2015
##
## git information: 01gmp-46.exp version used to generate 02bc-46.exp:

## *** DO NOT UPDATE MANUALLY ***

# tests/zsbc.test/02bc-46.exp

set timeout 3
spawn "$ZSBC" --SCM --numlib bc "$TESTDIR/01gmp-46.b"
send_user "***   BC - check_functions()\n"

set test "Illegal break"
expect {
	-re "Error: .*: a\\(\\): Illegal break statement outside of a loop" { pass "$test" }
	default { fail "$test" }
}

set test "Function not defined"
expect {
	-re "Error: .*: beta\\(\\): Function a1 not defined" { pass "$test" }
	default { fail "$test" }
}

set test "Return with expression in void function"
expect {
	-re "Warning: .*: allo\\(\\): Non void return in void function" { pass "$test" }
	default { fail "$test" }
}

set test "Void return in non void function"
expect {
	-re "Warning: .*: ya\\(\\): Void return in non void function" { pass "$test" }
	default { fail "$test" }
}

set test "Wrong number of parameters"
expect {
	-re "Error: .*: xy\\(\\): Parameter number mismatch in a\\(\\) call" { pass "$test" }
	default { fail "$test" }
}

set test "Void function called in a context where a value is needed"
expect {
	-re "Warning: .*: ll\\(\\): Call of void noval\\(\\) in a context requesting a value" { pass "$test" }
	default { fail "$test" }
}

set test "Argument mismatch (1)"
expect {
	-re "Error: .*: caller1\\(\\): fbyval\\(\\) call: argument #1 mismatch" { pass "$test" }
	default { fail "$test" }
}

set test "Argument mismatch (2)"
expect {
	-re "Error: .*: caller2\\(\\): fbyref\\(\\) call: argument #1 mismatch" { pass "$test" }
	default { fail "$test" }
}

set test "Argument mismatch (3)"
expect {
	-re "Error: .*: caller3\\(\\): farraybyval\\(\\) call: argument #1 mismatch" { pass "$test" }
	default { fail "$test" }
}

set test "Argument mismatch (4)"
expect {
	-re "Error: .*: caller4\\(\\): farraybyref\\(\\) call: argument #1 mismatch" { pass "$test" }
	default { fail "$test" }
}

set test "Void function called in a context where, etc. (1)"
expect {
	-re "Warning: .*: novalinif\\(\\): Call of void noval\\(\\) in a context requesting a value" { pass "$test" }
	default { fail "$test" }
}

set test "Void function called in a context where, etc. (2)"
expect {
	-re "Warning: .*: novalinfor\\(\\): Call of void noval\\(\\) in a context requesting a value" { pass "$test" }
	default { fail "$test" }
}

set test "Void function called in a context where, etc. (3)"
expect {
	-re "Warning: .*: novalinwhile\\(\\): Call of void noval\\(\\) in a context requesting a value" { pass "$test" }
	default { fail "$test" }
}

set test "Void function called in a context where, etc. (4)"
expect {
	-re "Warning: .*: novalinreturn\\(\\): Call of void noval\\(\\) in a context requesting a value" { pass "$test" }
	default { fail "$test" }
}

set test "check_functions() called explicitly (1)"
send "define void ff() {return abcd()}\ncheck_functions()\n"
expect {
	-re "Warning: ff\\(\\): Non void return in void function" { pass "$test" }
	default { fail "$test" }
}

set test "check_functions() called explicitly (2)"
expect {
	-re "Error: ff\\(\\): Function abcd not defined" { pass "$test" }
	default { fail "$test" }
}

set test "Checking object count ref is null"
send "quit\n"
expect {
	-re "OK.*number count.*should be 0.*: 0\[^0-9\]+OK.*expr_t.*count.*should be 0.*: 0\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

