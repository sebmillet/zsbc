## Generated by tests/gen.sh
##   01gmp-40.exp -> 02bc-40.exp
##   Date: Sun Dec 20 15:12:18 CET 2015
##
## git information: 01gmp-40.exp version used to generate 02bc-40.exp:
##   commit cf2d7adc61720387a694c05cca7511e7550f2bbf
##   Author: SÃ©bastien Millet <sebastien.millet1@club-internet.fr>
##   Date:   Wed Oct 14 00:19:34 2015 +0200

## *** DO NOT UPDATE MANUALLY ***

# tests/zsbc.test/02bc-40.exp

set timeout 3
spawn "$ZSBC" --SCM --numlib bc
send_user "***   BC - functions\n"

set test "Function (1)"
send "define f(x) return x+1\n101\nf(2)\nx\n202\n"
expect {
	-re "101\[^0-9\]+3\[^0-9\]+0\[^0-9\]+202\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function (2)"
send "define f(x,y,z) return 100*x+10*y+z\n121\nf(8,7,6)\nx\ny\nz\n212\n"
expect {
	-re "121\[^0-9\]+876\[^0-9\]+0\[^0-9\]+0\[^0-9\]+0\[^0-9\]+212\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function (3)"
send "x=97\ndefine f(x) return x+1\n131\nf(2)\nx\n232\n"
expect {
	-re "131\[^0-9\]+3\[^0-9\]+97\[^0-9\]+232\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function (4)"
send "x=96;y=95;z=94\ndefine f(x,y,z) return 100*x+10*y+z\n141\nf(8,7,6)\nx\ny\nz\n242\n"
expect {
	-re "141\[^0-9\]+876\[^0-9\]+96\[^0-9\]+95\[^0-9\]+94\[^0-9\]+242\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function (5)"
send "x=96;y=95;z=94\ndefine f(x,y,z) return 100*x+10*y+z\n151\nf(56/7,1+1+1+1+1+1+1,3^(1+3-2))\nx\ny\nz\n252\n"
expect {
	-re "151\[^0-9\]+879\[^0-9\]+96\[^0-9\]+95\[^0-9\]+94\[^0-9\]+252\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function (6)"
send "define ahha(){return 1/0}\n645\nahha()\n"
expect {
	-re "645\[^0-9\]+.*Divide by zero\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Function (7)"
send "define void ahhb(){x=1/0;return}\n648\nahhb()\n"
expect {
	-re "648\[^0-9\]+.*Divide by zero\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

set test "Checking object count ref is null"
send "quit\n"
expect {
	-re "OK.*number count.*should be 0.*: 0\[^0-9\]+OK.*expr_t.*count.*should be 0.*: 0\[^0-9\]+" { pass "$test" }
	default { fail "$test" }
}

