
   zsbc, a portable integer calculator using gmp
   =============================================

Date: 2015-07-23 23:49 +0200

Contents:

      I. WHAT IS ZSBC?
     II. WHY ZSBC?
    III. LICENCE
     IV. COMPILATION AND INSTALLATION



I.    WHAT IS ZSBC?

It is a calculator supporting simple arithmetic along with big integers, as
provided by the GNU MP library.
It is similar to bc and one goal of this program is to be compatible with bc
scripts.
zsbc stands for "Zero Scale bc": the focus is not on real number management
but on integers.

Because the author of these lines wanted bc tests to be applicable to zsbc,
zsbc got compiled with bc number library.
By default zsbc starts with gmp integers (mpz_t) but if provided with the
command-line argument
	-lib bc
or if during execution you enter the statement
	lib "bc"
then bc number library will be used (instead of gmp' mpz_t) and decimal
numbers will be managed as per bc standard = among other things, taking into
account the value of the "scale" variable, that defines the number of decimals
to keep after the comma.



II.   WHY ZSBC?

To have fun.
To learn bison/flex programming.
To do some tests and checks around cryptography.
To deal with big integers, you have bc, PARI/GP, python, ...
And now you have zsbc!



III.  LICENCE

See COPYING file that comes along with the package the program belongs to.



IV.   COMPILATION AND INSTALLATION

0) Note about GMP versus MPIR

MPIR can be a substitute to GMP. As the author of these lines could not build
zsbc.exe along with libgmp using MSVC, decision was made to use libmpir in the
case of Windows/msvc compilation.

In the end the following was done:
  Linux          compiled with libgmp
  Windows/mingw  compiled with libgmp
  Windows/msvc   compiled with libmpir

That said, given the fact that MPIR is so close to GMP (as of writing of this
text = September 2015), it is believed that MPIR can successfully compile with
zsbc in all cases, including Linux and Windows/mingw.

- Linux

1) GMP library

GMP lib has to be available on your system to compile zsbc. GMP lib is the GNU
Multi Precision Arithmetic Library.
The debian package name is libgmp-dev.

The GMP library homepage:
	https://gmplib.org

2) Compilation

The file of name INSTALL, distributed with zsbc source files, gives
instructions to compile and install the program, using the usual
    ./configure
    make
    make install
sequence.
This INSTALL file is the one provided by default by autotools.

- Windows (mingw)

Done successfully with both 32-bit (mingw) and 64-bit (mingw-w64) compilers.

There does not seem to be Windows-ready libgmp binaries around, to be used by
mingw.
This part - buid libgmp Windows binaries and link zsbc with - is the main
factor of complexity.
Only static linking with libgmp, using mingw compiler, was done.

Note about MSVC and libgmp
	It was not possible to build zsbc.exe with msvc (Microsoft Visual C++
	12.0). The compilation would eventually produce an error
		unresolved reference __chkstk
	at link time, inside libgmp objects.
	That is why, MSVC builds zsbc.exe with MPIR instead of GMP.

** BUILD STEP 1

At first you have to download and install Mingw *along with msys*.

//FIXME//To be detailed

Mingw homepage:
    http://www.mingw.org

** BUILD STEP 2 **

You have to download the source of the GNU Multi Precision Arithmetic Library
and build it with the source.
Build needs be done from an msys terminal, using mingw gcc compiler.

The GMP library homepage:
	https://gmplib.org

** BUILD STEP 3 **

You have to tune makefile.mingw depending on how you built the GMP library.
Note you will also have to tune it a little bit if you wish to dynamically
link libgmp to zsbc (with a .dll) instead of static linking as is Today.
Dynamic linking was not tested.

** BUILD STEP 4 **

Enter top source directory and run
    mingw32-make.exe -f makefile.mingw

You're done!

- Windows (msvc)

