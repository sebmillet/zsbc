Notes about zsbc programming
============================


1) General links between bc and zsbc

zsbc stands for "Zero-Scale BC".
It was meant to do calculations around cryptography, using the syntax and
function definition standard of bc.

The default number library of zsbc is integers of gmp, the GNU
Multi Precision library.
GMP homepage:
    https://gmplib.org
These "integers of gmp" are the "mpz_t" provided by GMP.

    Note
Under Windows and when compiled with msvc (Windows binaries are generated with
msvc by default, while generation can be done with mingw, too), the mpir
library is used as a replacement for gmp.  MPIR homepage:
    http://mpir.org/

In order to ease the compatibility checks between zsbc and bc, zsbc can also
work with "libbc", the number library of bc. This library is fairly different
from GMP as it can manage numbers with arbitrary long decimals, tuned by the
"scale" variable.
This is why, when working with GMP, zsbc is equivalent to bc when used with
scale=0. Thus, the name of zsbc: "Zero-Scale BC".

zsbc can switch from one number library to another during execution using the
command libswitch. Example
    libswitch "bc"
will switch to the libbc number library.
    libswitch "gmp"
will switch to the gmp number library.
zsbc can be executed with the -n option (or --numlib) to start with a given
number library, as in
    zsbc --numlib bc
to start with libbc.

    Note
Each number library uses a symbol space of its own, therefore all variables
(simple and arrays) and functions are visible only when using the number
library they were defined in.


2) Code take aways from bc

- Obviously, the libbc source code.
  Inside zsbc source, it corresponds to the folders
    h
    lib

- The libmath.b library, so that, similarly to bc, zsbc can be invoked with
  the -l option, providing predefined math routines.
  Inside zsbc source, it corresponds to the folder
    src/bc

- The push_constant function. It allows to read a number with any value of
  ibase, while the bc_str2num (that belongs to libbc) can manage only string
  to number conversion in 10-base.
  Inside zsbc source, it corresponds to the function
    src/numwrap.c -> push_constant
  Using the push_constant function "as is" was important to produce the exact
  same results with math routines (-l option). In particular, executing the
  following:
    scale=2
    pi=3.1416
  will produce a 4-digit (scale = 4) number, although the scale is equal to 2.
  This way of working (as opposed to cutting a litteral number' scale to the
  "scale" variable value) is essential to the correct execution of the
  mathlib.

- The readline library "wrapper" function rl_input.
  Inside zsbc source, it corresponds to the function
    src/main.c -> rl_input (and a few associated variables)


3) ibase management
===================

bc keeps numbers as strings and will take into account ibase at the very last
moment, when the string is to be converted into a bcnum.

zsbc converts strings into numbers at function definition time, not later
during execution. As a result, constructs like the following could fail if
found inside a function definition, and assuming ibase is 10 at the time the
function is being defined:
    ibase=16
    x=FF /* assign 255 (decimal) to x */

Here comes the functions hackbc*, defined in parser.y.
It is really a hack... It catches ibase assignment inside the code and will
execute it immediately (not only at run time) in certain conditions. The
conditions are:
    - ibase assignment occurs inside a function definition
      (well it is not a condition strictly speaking but a reminder ; out of a
      function definition, ibase assignment is always executed immediately, as
      is normal)
    - ibase is assigned a constant expression, ex.:
        ibase=16
        ibase=4^2
        ibase=(1+1)*(1+1+1+1+1+1+1+1)
    - ibase assignment occurs at the level of the function block, not inside
      an if instruction or while or the like. That is to say, the following
      will work (assumption: ibase is 10 when "define f..." is executed):
        define f() {
            ibase=16
            x=FF
        }
        => it will work in the sense that ibase=16 will be executed at
        function *definition* time (and also at function execution time as
        always), thus FF will be correctly read as the decimal number
        255.
      But the following won't work:
        define f() {
            if (1) ibase=16
            x=FF
        }
        => because ibase assignment occurs inside an if, it is not executed at
        function definition time and thus x=FF is read with ibase being 10.
        With bc as numlib, it'll produce the decimal 99 number and even at
        function execution time, x will be set to 99.

You might wonder why all these complications and not simply stick to the bc
way. I didn't want that because zsbc has a logic of its own and bc
compatibility is done to re-use bc scripts and ease tests (zsbc produces the
same results as bc in almost all cases, when using bc numbers library). But
zsbc is not meant to be identical to bc internally.

By the way zsbc uses gmp as the default number library, not bc's. It must be
run with the option
  --numlib bc
to use bc numbers library instead.

Also note in real life I have never found a case where ibase assignment occurs
in an if statement or inside a loop. ibase assignments are always done at the
beginning of function definitions and at the end (to revert ibase back to its
original value).

Ultimately this hack, while clearly being a hack, works fine.

